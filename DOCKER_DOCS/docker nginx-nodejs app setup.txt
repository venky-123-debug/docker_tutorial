# Pull MongoDB Docker Image
docker pull mongo:4.4

# Pull Nginx Docker Image
docker pull nginx:latest

# Create Docker Network
docker network create venky_network

# Run MongoDB Container
docker run -d --env-file .env -p 27017:27017 --network venky_network --name mongo mongo:4.4

# Check Running Containers
docker ps

# Install ncc globally (if not already installed)
npm install -g @vercel/ncc

# Install pkg globally (if not already installed)
npm install -g pkg

# Compile Your Node.js Application with ncc
ncc build index.js -o dist

# Package Your Node.js Application with pkg
pkg -t node18-linux --compress -GZip -o server-pkg dist/index.js

# Check Generated Files
ls

# Run Packaged Node.js Application
./server-pkg

# Create Dockerfile (open with a text editor, e.g., nano)
nano Dockerfile

# Sample Dockerfile Content:
FROM node:18
WORKDIR /app
COPY dist/server-pkg .
EXPOSE 3000
CMD ["./server-pkg"]

# Build Docker Image for Node.js Application
docker build -t nodejs-app:1.0 .

# Run Node.js Application Container
docker run -d --env-file .env -p 3000:3000 --network venky_network --name nodejs-app nodejs-app:1.0

# Check Running Containers Again
docker ps

--------------------------------------------------------------------------------------------------------------------------
# default nginx configuration
server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/html;  # Serve the static files
        index  index.html index.htm;
        try_files $uri $uri/ =404;
    }

    location /api/ {  # Adjust this path according to your API routes
        proxy_pass http://nodejs-app:3000;  # Forward to Node.js app
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

----------------------------------------------------------------------------------------------------------------------------
# default docker compose yaml file for nginx 
version: "3.9"

networks:
  venky_network:
    external: true
    name: digilabel-net

services:
  nginx:
    image: nginx:latest
    volumes:
      - /home/ubuntu/nginx/public:/usr/share/nginx/html     
      - /home/ubuntu/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - published: 80
        target: 80
        mode: host
    networks:
      - venky_network
    deploy:
      mode: global
      restart_policy:
        condition: any

----------------------------------------------------------------------------------------------------------------------------
# to run docker container from docker compose yml file in detatched mode
docker-compose up --build -d 

# rebuild the image in detatched mode
docker-compose down
docker-compose up --build -d

# To see all logs in docker compose
docker-compose logs -f

# to see logs for particular app in docker compose
docker-compose logs -f nodejs-app

----------------------------------------------------------------------------------------------------------------------------
# sample compose file for all nodejs app, nginx and mongodb docker containers
version: "3.9"                                                                                                                                                                                             [8/1611]
                                                                                                                                                                                                                   
networks:                                                                                                                                                                                                          
  venky_network:                                                                                                                                                                                                   
#    external: true                                                                                                                                                                                                
    name: venky_network                                                                                                                                                                                            
                                                                                                                                                                                                                   
services:                                                                                                                                                                                                          
  nginx:                                                                                                                                                                                                           
    container_name: nginx
    image: nginx:latest
    volumes:
      - /home/ubuntu/nginx/public:/usr/share/nginx/html
      - /home/ubuntu/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - nginx_logs:/var/log/nginx           # Store logs from Nginx
    ports:
      - "80:80"  # Expose port 80
    networks:
      - venky_network
    deploy:
      mode: global
      restart_policy:
        condition: any
mongo:
    container_name: mongo
    image: mongo:4.4  # Use the official MongoDB image
    ports:
      - "27017:27017"  # Expose MongoDB port
    networks:
      - venky_network
    volumes:
      - mongo_data:/data/db  # Persist MongoDB data
nodejs-app:
    container_name: nodejs-app
    image: nodejs-app:1.0  # Your Node.js app image
    build:
      context: /home/ubuntu/test/node-mongo-nginx  # Adjust to your Node.js app directory
      dockerfile: Dockerfile  # Specify your Dockerfile if not named 'Dockerfile'
    ports:
      - "${PORT}:${PORT}"  # Map Node.js app port from .env
    environment:
      MONGO_URL: ${MONGO_URL}
    volumes:
      - nodejs_logs:/usr/src/app/logs     # Store logs from Node.js app
      - nodejs_requests:/usr/src/app/requests # Store request data (e.g., access logs or request payloads)
    depends_on:
      - mongo
    networks:
      - venky_network
    restart: always

volumes:
  nodejs_logs:                              # Node.js application logs
  nodejs_requests:                          # Node.js requests data
  nginx_logs:                               # Nginx logs
  mongo_data:                               # MongoDB data





